name: Build and Release

on:
  push:
    branches: [main, test_cross_platform]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name: aimit-linux-x86_64
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name: aimit-linux-aarch64
          # macOS x86_64 (Intel)
          - target: x86_64-apple-darwin
            os: macos-latest
            asset_name: aimit-macos-x86_64
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            asset_name: aimit-macos-aarch64
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            asset_name: aimit-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/aimit${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release archive
        run: |
          mkdir -p release-binaries
          for artifact in */; do
            artifact_name=$(basename "$artifact")
            if [[ "$artifact_name" == *"windows"* ]]; then
              cp "$artifact"/*.exe "release-binaries/"
            else
              cp "$artifact"/* "release-binaries/"
            fi
          done

          # Create a zip file with all binaries
          cd release-binaries
          zip -r ../aimit-binaries.zip .
          cd ..

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./aimit-binaries.zip
          asset_name: aimit-binaries.zip
          asset_content_type: application/zip

  update-binaries:
    name: Update Binary Files
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare binaries for bin directory
        run: |
          mkdir -p bin
          for artifact in */; do
            artifact_name=$(basename "$artifact")
            if [[ "$artifact_name" == *"windows"* ]]; then
              cp "$artifact"/*.exe "bin/"
            else
              cp "$artifact"/* "bin/"
            fi
          done

      - name: Commit and push binaries
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add bin/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update binaries for release ${{ github.sha }}"
            git push
          fi
